@page "/appointments"
@using System.Collections.Generic
@using System.IO
@using System.Linq
@inject NavigationManager Navigation

<div class="container">
    <h3>Appointment Management</h3>

    <!-- Find Appointment Section -->
    <div class="find-appointment-section">
        <h4>Find Appointment</h4>
        <div class="input-group">
            <label for="appointment-id">Appointment ID:</label>
            <input type="text" id="appointment-id" @bind="searchAppointmentId" placeholder="Enter Appointment ID">
        </div>
        <div class="input-group">
            <label for="vehicle-id">Vehicle ID:</label>
            <input type="text" id="vehicle-id" @bind="searchVehicleId" placeholder="Enter Vehicle ID">
        </div>
        <div class="input-group">
            <label for="customer-id">Customer ID:</label>
            <input type="text" id="customer-id" @bind="searchCustomerId" placeholder="Enter Customer ID">
        </div>
        <div class="input-group">
            <button type="button" class="btn btn-primary" @onclick="FindAppointment">Find Appointment</button>
        </div>

        <div class="appointment-results">
            @if (!string.IsNullOrEmpty(appointmentErrorMessage))
            {
                <p class="error-message">@appointmentErrorMessage</p>
            }
            else if (foundAppointment != null)
            {
                <table class="table">
                    <thead>
                        <tr>
                            <th>Appointment ID</th>
                            <th>Vehicle ID</th>
                            <th>Customer ID</th>
                            <th>Description</th>
                            <th>Labor Cost</th>
                            <th>Parts Cost</th>
                            <th>Date</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>@foundAppointment.AppointmentId</td>
                            <td>@foundAppointment.VehicleId</td>
                            <td>@foundAppointment.CustomerId</td>
                            <td>@foundAppointment.Description</td>
                            <td>@foundAppointment.LaborCost</td>
                            <td>@foundAppointment.PartsCost</td>
                            <td>@foundAppointment.Date.ToShortDateString()</td>
                        </tr>
                    </tbody>
                </table>
            }
        </div>
    </div>

    <!-- Add Appointment Section -->
    <div class="add-appointment-section">
        <h4>Add New Appointment</h4>
        <form>
            <div class="input-group">
                <label for="new-appointment-id">Appointment ID:</label>
                <input type="text" id="new-appointment-id" @bind="newAppointmentId" placeholder="Enter Appointment ID">
            </div>
            <div class="input-group">
                <label for="new-vehicle-id">Vehicle ID:</label>
                <input type="text" id="new-vehicle-id" @bind="newVehicleId" placeholder="Enter Vehicle ID">
            </div>
            <div class="input-group">
                <label for="new-customer-id">Customer ID:</label>
                <input type="text" id="new-customer-id" @bind="newCustomerId" placeholder="Enter Customer ID">
            </div>
            <div class="input-group">
                <label for="new-description">Description:</label>
                <textarea id="new-description" @bind="newDescription" placeholder="Enter Description"></textarea>
            </div>
            <div class="input-group">
                <label for="new-labor-cost">Labor Cost:</label>
                <input type="text" id="new-labor-cost" @bind="newLaborCost" placeholder="Enter Labor Cost">
            </div>
            <div class="input-group">
                <label for="new-parts-cost">Parts Cost:</label>
                <input type="text" id="new-parts-cost" @bind="newPartsCost" placeholder="Enter Parts Cost">
            </div>
            <div class="input-group">
                <label for="new-date">Date:</label>
                <input type="date" id="new-date" @bind="newDate">
            </div>
            <button class="btn btn-primary" type="button" @onclick="AddAppointment">Add Appointment</button>
        </form>

        @if (!string.IsNullOrEmpty(addAppointmentSuccessMessage))
        {
            <div class="alert alert-success">@addAppointmentSuccessMessage</div>
        }
        @if (!string.IsNullOrEmpty(addAppointmentErrorMessage))
        {
            <div class="alert alert-danger">@addAppointmentErrorMessage</div>
        }
    </div>
</div>

@code {
    // Variables for finding appointment
    string searchAppointmentId;
    string searchVehicleId;
    string searchCustomerId;
    Appointment foundAppointment;
    string appointmentErrorMessage;

    // Variables for adding appointment
    string newAppointmentId;
    string newVehicleId;
    string newCustomerId;
    string newDescription;
    string newLaborCost;
    string newPartsCost;
    DateTime? newDate;
    string addAppointmentSuccessMessage;
    string addAppointmentErrorMessage;

    List<Appointment> appointments = new List<Appointment>();

    private void FindAppointment()
    {
        try
        {
            appointmentErrorMessage = string.Empty;
            foundAppointment = appointments.FirstOrDefault(a =>
                (string.IsNullOrEmpty(searchAppointmentId) || a.AppointmentId == searchAppointmentId) &&
                (string.IsNullOrEmpty(searchVehicleId) || a.VehicleId == searchVehicleId) &&
                (string.IsNullOrEmpty(searchCustomerId) || a.CustomerId == searchCustomerId));

            if (foundAppointment == null)
            {
                appointmentErrorMessage = "No appointment found.";
            }
        }
        catch (Exception e)
        {
            appointmentErrorMessage = $"Error finding appointment: {e.Message}";
        }
    }

    private void AddAppointment()
    {
        try
        {
            addAppointmentSuccessMessage = string.Empty;
            addAppointmentErrorMessage = string.Empty;

            var newAppointment = new Appointment
                {
                    AppointmentId = newAppointmentId,
                    VehicleId = newVehicleId,
                    CustomerId = newCustomerId,
                    Description = newDescription,
                    LaborCost = newLaborCost,
                    PartsCost = newPartsCost,
                    Date = newDate ?? DateTime.Now // Use current date if newDate is null
                };

            appointments.Add(newAppointment);
            addAppointmentSuccessMessage = "Appointment successfully added!";
        }
        catch (Exception e)
        {
            addAppointmentErrorMessage = $"Error adding appointment: {e.Message}";
        }
    }

    
    public class Appointment
    {
        public string AppointmentId { get; set; }
        public string VehicleId { get; set; }
        public string CustomerId { get; set; }
        public string Description { get; set; }
        public string LaborCost { get; set; }
        public string PartsCost { get; set; }
        public DateTime Date { get; set; }
    }
}
