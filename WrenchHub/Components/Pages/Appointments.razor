<!--
Name: Roman Sorokin, Mace Howald, Nasratullah Asadi
Date: 2024-08-11

Program Description:
This page is part of a vehicle management system built using MAUI.
The application allows users to manage appointments by finding existing appointments based on criteria such as Appointment ID, Vehicle ID, or Customer ID. Additionally, users can add new appointments by providing necessary details like labor cost, parts cost, and appointment date.

Inputs:
Users input search criteria in the form of text fields. The search criteria are then processed to query the database for matching records. For adding new appointments, users input appointment details, including labor and parts costs.

Processing:
The page interacts with an SQL database to retrieve or insert appointment records based on the user input. If search criteria are provided, the system queries the database for matching records.
If no criteria are provided, it returns all appointments. For adding a new appointment, the system validates the input and inserts a new record into the database.

Outputs:
The outputs are displayed in a table format showing the appointment details that match the search criteria. If adding a new appointment, the system outputs a success or error message based on the operation result.
-->

@page "/appointments"
@using System.Collections.Generic
@using System.IO
@using System.Linq
@using TravelApp.Data
@using Microsoft.Data.SqlClient
@inject NavigationManager Navigation

<div class="container">
    <h3>Appointment Management</h3>

    <!-- Find Appointment Section -->
    <div class="find-appointment-section">
        <h4>Find Appointment</h4>
        <div class="input-group">
            <label for="appointment-id">Appointment ID:</label>
            <input type="text" id="appointment-id" @bind="searchAppointmentId" placeholder="Enter Appointment ID">
        </div>
        <div class="input-group">
            <label for="vehicle-id">Vehicle ID:</label>
            <input type="text" id="vehicle-id" @bind="searchVehicleId" placeholder="Enter Vehicle ID">
        </div>
        <div class="input-group">
            <label for="customer-id">Customer ID:</label>
            <input type="text" id="customer-id" @bind="searchCustomerId" placeholder="Enter Customer ID">
        </div>
        <div class="input-group">
            <button type="button" class="btn btn-primary" @onclick="async () => await FindAppointment()">Find Appointment</button>
        </div>

        <div class="appointment-results">
            @if (!string.IsNullOrEmpty(appointmentErrorMessage))
            {
                <p class="error-message">@appointmentErrorMessage</p>
            }
            else if (foundAppointments.Any())
            {
                <table class="table">
                    <thead>
                        <tr>
                            <th>Appointment ID</th>
                            <th>Vehicle ID</th>
                            <th>Customer ID</th>
                            <th>Description</th>
                            <th>Labor Cost</th>
                            <th>Part Cost</th>
                            <th>Date</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var appointment in foundAppointments)
                        {
                            <tr>
                                <td>@appointment.AppointmentId</td>
                                <td>@appointment.VehicleId</td>
                                <td>@appointment.CustomerId</td>
                                <td>@appointment.Description</td>
                                <td>@string.Format("${0:0.00}", appointment.LaborCost)</td>
                                <td>@string.Format("${0:0.00}", appointment.PartsCost)</td>
                                <td>@appointment.Date.ToShortDateString()</td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>
    </div>

    <!-- Add Appointment Section -->
    <div class="add-appointment-section">
        <h4>Add New Appointment</h4>
        <form>
            <div class="input-group">
                <label for="new-appointment-id">Appointment ID:</label>
                <input type="text" id="new-appointment-id" @bind="newAppointmentId" placeholder="Enter Appointment ID">
            </div>
            <div class="input-group">
                <label for="new-vehicle-id">Vehicle ID:</label>
                <input type="text" id="new-vehicle-id" @bind="newVehicleId" placeholder="Enter Vehicle ID">
            </div>
            <div class="input-group">
                <label for="new-customer-id">Customer ID:</label>
                <input type="text" id="new-customer-id" @bind="newCustomerId" placeholder="Enter Customer ID">
            </div>
            <div class="input-group">
                <label for="new-description">Description:</label>
                <textarea id="new-description" @bind="newDescription" placeholder="Enter Description"></textarea>
            </div>
            <div class="input-group">
                <label for="new-labor-cost">Labor Cost:</label>
                <input type="text" id="new-labor-cost" @bind="newLaborCost" placeholder="Enter Labor Cost">
            </div>
            <div class="input-group">
                <label for="new-part-cost">Part Cost:</label>
                <input type="text" id="new-part-cost" @bind="newPartCost" placeholder="Enter Part Cost">
            </div>
            <div class="input-group">
                <label for="new-date">Date:</label>
                <input type="date" id="new-date" @bind="newDate">
            </div>
            <button class="btn btn-primary" type="button" @onclick="async () => await AddAppointment()">Add Appointment</button>
        </form>

        @if (!string.IsNullOrEmpty(addAppointmentSuccessMessage))
        {
            <div class="alert alert-success">@addAppointmentSuccessMessage</div>
        }
        @if (!string.IsNullOrEmpty(addAppointmentErrorMessage))
        {
            <div class="alert alert-danger">@addAppointmentErrorMessage</div>
        }
    </div>
</div>

@code {
    // Variables for finding appointment
    string searchAppointmentId;
    string searchVehicleId;
    string searchCustomerId;
    private List<Appointment> foundAppointments = new List<Appointment>(); // List to store found appointments
    string appointmentErrorMessage;

    // Variables for adding appointment
    string newAppointmentId;
    string newVehicleId;
    string newCustomerId;
    string newDescription;
    string newLaborCost;
    string newPartCost;
    DateTime? newDate;
    string addAppointmentSuccessMessage;
    string addAppointmentErrorMessage;

    List<Appointment> appointments = new List<Appointment>(); // List to store all appointments

    private async Task FindAppointment()
    {
        try
        {
            appointmentErrorMessage = string.Empty; // Clear any error messages
            foundAppointments.Clear(); // Clear any found appointments

            string connectString = @"Data Source=(localdb)\MSSQLLocalDB;Initial Catalog=mechanic_db;Integrated Security=True;Encrypt=True;"; // Connection string
            using SqlConnection connect = new SqlConnection(connectString); // Create connection object

            await connect.OpenAsync(); // Open connection

            // Check if Customer ID exists if it's provided
            if (!string.IsNullOrEmpty(searchCustomerId))
            {
                SqlCommand customerCheckCommand = new SqlCommand(
                    "SELECT COUNT(*) FROM customer_table WHERE customer_id = @CustomerId", connect); // SQL command to check if customer ID exists
                customerCheckCommand.Parameters.AddWithValue("@CustomerId", int.Parse(searchCustomerId)); // Add parameter for customer ID

                int customerExists = (int)await customerCheckCommand.ExecuteScalarAsync(); // Returns the value of the first column of the first row if it exists

                if (customerExists == 0) // If customer ID does not exist
                {
                    appointmentErrorMessage = "Customer ID does not exist."; // Display an error message
                    return;
                }
            }

            // Check if Vehicle ID exists if it's provided
            if (!string.IsNullOrEmpty(searchVehicleId))
            {
                SqlCommand vehicleCheckCommand = new SqlCommand(
                    "SELECT COUNT(*) FROM vehicle_table WHERE vehicle_id = @VehicleId", connect); // SQL command to check if vehicle ID exists
                vehicleCheckCommand.Parameters.AddWithValue("@VehicleId", int.Parse(searchVehicleId)); // Add parameter for vehicle ID

                int vehicleExists = (int)await vehicleCheckCommand.ExecuteScalarAsync(); // Returns the value of the first column of the first row if it exists

                if (vehicleExists == 0)
                {
                    appointmentErrorMessage = "Vehicle ID does not exist."; // Display an error message
                    return;
                }
            }

            // If both checks passed, proceed to search for appointments
            SqlCommand command = new SqlCommand(
                "SELECT * FROM appointment_table WHERE " +
                "(appointment_id = @AppointmentId OR @AppointmentId IS NULL) " +
                "AND (vehicle_id = @VehicleId OR @VehicleId IS NULL) " +
                "AND (customer_id = @CustomerId OR @CustomerId IS NULL)", connect); // SQL command to search for appointments

            command.Parameters.AddWithValue("@AppointmentId", string.IsNullOrEmpty(searchAppointmentId) ? (object)DBNull.Value : int.Parse(searchAppointmentId)); // Add parameter for appointment ID
            command.Parameters.AddWithValue("@VehicleId", string.IsNullOrEmpty(searchVehicleId) ? (object)DBNull.Value : int.Parse(searchVehicleId)); // Add parameter for vehicle ID
            command.Parameters.AddWithValue("@CustomerId", string.IsNullOrEmpty(searchCustomerId) ? (object)DBNull.Value : int.Parse(searchCustomerId)); // Add parameter for customer ID

            SqlDataReader reader = await command.ExecuteReaderAsync(); // Execute command and get data reader

            while (await reader.ReadAsync()) // Read each row
            {
                foundAppointments.Add(new Appointment
                    {
                        AppointmentId = reader.GetInt32(0),
                        VehicleId = reader.GetInt32(1),
                        CustomerId = reader.GetInt32(2),
                        Description = reader.GetString(3).Trim(),
                        LaborCost = reader.GetDouble(4),
                        PartsCost = reader.GetDouble(5),
                        Date = reader.GetDateTime(6)
                    });
            }

            if (foundAppointments.Count == 0)
            {
                appointmentErrorMessage = "No appointments found."; // Display an error message if no appointments are found
            }

            reader.Close(); // Close data reader
        }
        catch (Exception e)
        {
            appointmentErrorMessage = $"Error finding appointment: {e.Message}"; // Display an error message
        }
    }

    private async Task AddAppointment()
    {
        try
        {
            addAppointmentSuccessMessage = string.Empty; // Clear any success messages
            addAppointmentErrorMessage = string.Empty; // Clear any error messages

            string connectString = @"Data Source=(localdb)\MSSQLLocalDB;Initial Catalog=mechanic_db;Integrated Security=True;Encrypt=True;"; // Connection string
            using SqlConnection connect = new SqlConnection(connectString); // Create connection object
            await connect.OpenAsync(); // Open connection

            // Check if Customer ID exists
            SqlCommand customerCheckCommand = new SqlCommand(
                "SELECT COUNT(*) FROM customer_table WHERE customer_id = @CustomerId", connect); // SQL command to check if customer ID exists
            customerCheckCommand.Parameters.AddWithValue("@CustomerId", int.Parse(newCustomerId)); // Add parameter for customer ID

            int customerExists = (int)await customerCheckCommand.ExecuteScalarAsync(); // Returns the value of the first column of the first row if it exists

            if (customerExists == 0)
            {
                addAppointmentErrorMessage = "Customer ID does not exist."; // Display an error message
                return;
            }

            // Check if Vehicle ID exists
            SqlCommand vehicleCheckCommand = new SqlCommand(
                "SELECT COUNT(*) FROM vehicle_table WHERE vehicle_id = @VehicleId", connect); // SQL command to check if vehicle ID exists
            vehicleCheckCommand.Parameters.AddWithValue("@VehicleId", int.Parse(newVehicleId)); // Add parameter for vehicle ID

            int vehicleExists = (int)await vehicleCheckCommand.ExecuteScalarAsync(); // Returns the value of the first column of the first row if it exists

            if (vehicleExists == 0)
            {
                addAppointmentErrorMessage = "Vehicle ID does not exist."; // Display an error message
                return;
            }

            // If both checks passed, proceed to add the appointment
            SqlCommand command = new SqlCommand(
                "INSERT INTO appointment_table (appointment_id, vehicle_id, customer_id, description, labor_cost, part_cost, date) " +
                "VALUES (@AppointmentId, @VehicleId, @CustomerId, @Description, @LaborCost, @PartCost, @Date)", connect); // SQL command to add appointment

            // Add parameters for appointment
            command.Parameters.AddWithValue("@AppointmentId", int.Parse(newAppointmentId));
            command.Parameters.AddWithValue("@VehicleId", int.Parse(newVehicleId));
            command.Parameters.AddWithValue("@CustomerId", int.Parse(newCustomerId));
            command.Parameters.AddWithValue("@Description", newDescription);
            command.Parameters.AddWithValue("@LaborCost", double.Parse(newLaborCost));
            command.Parameters.AddWithValue("@PartCost", double.Parse(newPartCost));
            command.Parameters.AddWithValue("@Date", newDate ?? DateTime.Now);

            int result = await command.ExecuteNonQueryAsync(); // Execute command and get result

            if (result > 0)
            {
                addAppointmentSuccessMessage = "Appointment successfully added!"; // Display a success message
            }
            else
            {
                addAppointmentErrorMessage = "Error adding appointment."; // Display an error message
            }
        }
        catch (Exception e)
        {
            addAppointmentErrorMessage = $"Error adding appointment: {e.Message}"; // Display an error message
        }
    }
}
